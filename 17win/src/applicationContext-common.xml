<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">
	<!-- 配置SessionFactory,由Spring容器来管理Hibernate -->
	<!--
		非Annotation时,使用org.springframework.orm.hibernate3.LocalSessionFactoryBean,
		它注入实体类的方式是setMappingResources(),而Hibernate Annotation所用的映射方式 不是mapping
		resource,而是mapping class,这就要用到LocalSessionFactoryBean的子类
		AnnotationSessionFactoryBean了.因为AnnotationSessionFactoryBean它支持实体的注入
		方式setAnnotatedClasses,即对应Hibernate中的mapping class.参见这两个类的源代码.
	-->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="configLocation">
			<value>classpath:hibernate.cfg.xml</value>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<!-- 配置事务的传播特性 -->
	<tx:advice id="managerAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" rollback-for="java.lang.Exception" />
			<tx:method name="add*" rollback-for="java.lang.Exception" />
			<tx:method name="update*"
				rollback-for="java.lang.Exception" />
			<tx:method name="delete*"
				rollback-for="java.lang.Exception" />
			<tx:method name="insert*"
				rollback-for="java.lang.Exception" />
			<tx:method name="input*" rollback-for="java.lang.Exception" />
			<tx:method name="merge*" rollback-for="java.lang.Exception" />
			<tx:method name="*" read-only="true" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>


	<!-- 那些类的哪些方法参与事务-->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="allManagerMethod"
			expression="execution(* net.win.service..*.*(..))" />
		<aop:advisor pointcut-ref="allManagerMethod"
			advice-ref="managerAdvice" />
	</aop:config>



	<!-- 使Spring关注Annotation 
		<context:annotation-config/>
	-->
	<!--
		让Spring通过自动扫描来查询和管理Bean 有了这一句上面的<context:annotation-config/>可以注释掉
	-->
	<context:component-scan base-package="net.win" />

	<!-- 邮件发送实现 -->
	<bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.qq.com" />
		<property name="port" value="25" />
		<property name="username" value="30756500@qq.com" />
		<property name="password" value="8868829xgj" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
			</props>
		</property>
	</bean>
	<bean id="freeMarkerCfj"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath"
			value="classpath:mailTemplate" /><!--指定模板文件目录-->
		<property name="freemarkerSettings"><!-- 设置FreeMarker环境属性-->
			<props>
				<prop key="template_update_delay">1800</prop><!--刷新模板的周期，单位为秒-->
				<prop key="default_encoding">UTF-8</prop><!--模板的编码格式 -->
				<prop key="locale">zh_CN</prop><!-- 本地化设置-->
			</props>
		</property>
	</bean>

	<!--②异步线程执行器-->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
	</bean>





	<!-- quartz -->
	<!-- 要调用的工作类 -->
	<bean id="taskQuartz" class="net.win.service.quartz.TaskQuartz">

	</bean>
	<!-- 定义调用对象和调用对象的方法 -->
	<bean id="minuteTask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 调用的类 -->
		<property name="targetObject">
			<ref bean="taskQuartz" />
		</property>
		<!-- 调用类中的方法 -->
		<property name="targetMethod">
			<value>minuteTask</value>
		</property>
	</bean>
	<!-- 定义触发任务状态更新，每分钟-->
	<bean id="minuteTaskTime"
		class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="minuteTask" />
		</property>
		<!-- cron表达式 -->
		<property name="cronExpression">
			<value>0 * * * * ?</value>
		</property>
	</bean>
	<!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序  -->
	<bean id="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="minuteTaskTime" />
			</list>
		</property> 
	</bean>
	<!-- quartz end  -->
</beans>